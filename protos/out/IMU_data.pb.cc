// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IMU_data.proto

#include "IMU_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace IMU {
class IMU_dataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IMU_data> _instance;
} _IMU_data_default_instance_;
}  // namespace IMU
static void InitDefaultsscc_info_IMU_data_IMU_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IMU::_IMU_data_default_instance_;
    new (ptr) ::IMU::IMU_data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IMU::IMU_data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IMU_data_IMU_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IMU_data_IMU_5fdata_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_IMU_5fdata_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_IMU_5fdata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_IMU_5fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_IMU_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::IMU::IMU_data, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::IMU::IMU_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IMU::IMU_data, roll_),
  PROTOBUF_FIELD_OFFSET(::IMU::IMU_data, pitch_),
  PROTOBUF_FIELD_OFFSET(::IMU::IMU_data, acc_x_),
  PROTOBUF_FIELD_OFFSET(::IMU::IMU_data, acc_y_),
  PROTOBUF_FIELD_OFFSET(::IMU::IMU_data, acc_z_),
  PROTOBUF_FIELD_OFFSET(::IMU::IMU_data, gyro_x_),
  PROTOBUF_FIELD_OFFSET(::IMU::IMU_data, gyro_y_),
  PROTOBUF_FIELD_OFFSET(::IMU::IMU_data, gyro_z_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::IMU::IMU_data)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IMU::_IMU_data_default_instance_),
};

const char descriptor_table_protodef_IMU_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016IMU_data.proto\022\003IMU\"\376\001\n\010IMU_data\022\021\n\004ro"
  "ll\030\001 \001(\002H\000\210\001\001\022\022\n\005pitch\030\002 \001(\002H\001\210\001\001\022\022\n\005acc"
  "_x\030\003 \001(\002H\002\210\001\001\022\022\n\005acc_y\030\004 \001(\002H\003\210\001\001\022\022\n\005acc"
  "_z\030\005 \001(\002H\004\210\001\001\022\023\n\006gyro_x\030\006 \001(\002H\005\210\001\001\022\023\n\006gy"
  "ro_y\030\007 \001(\002H\006\210\001\001\022\023\n\006gyro_z\030\010 \001(\002H\007\210\001\001B\007\n\005"
  "_rollB\010\n\006_pitchB\010\n\006_acc_xB\010\n\006_acc_yB\010\n\006_"
  "acc_zB\t\n\007_gyro_xB\t\n\007_gyro_yB\t\n\007_gyro_zb\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_IMU_5fdata_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_IMU_5fdata_2eproto_sccs[1] = {
  &scc_info_IMU_data_IMU_5fdata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_IMU_5fdata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IMU_5fdata_2eproto = {
  false, false, descriptor_table_protodef_IMU_5fdata_2eproto, "IMU_data.proto", 286,
  &descriptor_table_IMU_5fdata_2eproto_once, descriptor_table_IMU_5fdata_2eproto_sccs, descriptor_table_IMU_5fdata_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_IMU_5fdata_2eproto::offsets,
  file_level_metadata_IMU_5fdata_2eproto, 1, file_level_enum_descriptors_IMU_5fdata_2eproto, file_level_service_descriptors_IMU_5fdata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_IMU_5fdata_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_IMU_5fdata_2eproto)), true);
namespace IMU {

// ===================================================================

void IMU_data::InitAsDefaultInstance() {
}
class IMU_data::_Internal {
 public:
  using HasBits = decltype(std::declval<IMU_data>()._has_bits_);
  static void set_has_roll(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pitch(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_acc_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_acc_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_acc_z(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_gyro_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_gyro_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_gyro_z(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

IMU_data::IMU_data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IMU.IMU_data)
}
IMU_data::IMU_data(const IMU_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roll_, &from.roll_,
    static_cast<size_t>(reinterpret_cast<char*>(&gyro_z_) -
    reinterpret_cast<char*>(&roll_)) + sizeof(gyro_z_));
  // @@protoc_insertion_point(copy_constructor:IMU.IMU_data)
}

void IMU_data::SharedCtor() {
  ::memset(&roll_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gyro_z_) -
      reinterpret_cast<char*>(&roll_)) + sizeof(gyro_z_));
}

IMU_data::~IMU_data() {
  // @@protoc_insertion_point(destructor:IMU.IMU_data)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IMU_data::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IMU_data::ArenaDtor(void* object) {
  IMU_data* _this = reinterpret_cast< IMU_data* >(object);
  (void)_this;
}
void IMU_data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMU_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IMU_data& IMU_data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IMU_data_IMU_5fdata_2eproto.base);
  return *internal_default_instance();
}


void IMU_data::Clear() {
// @@protoc_insertion_point(message_clear_start:IMU.IMU_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&roll_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gyro_z_) -
        reinterpret_cast<char*>(&roll_)) + sizeof(gyro_z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMU_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float roll = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_roll(&has_bits);
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pitch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_pitch(&has_bits);
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc_x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_acc_x(&has_bits);
          acc_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc_y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_acc_y(&has_bits);
          acc_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc_z = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_acc_z(&has_bits);
          acc_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gyro_x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_gyro_x(&has_bits);
          gyro_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gyro_y = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_gyro_y(&has_bits);
          gyro_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gyro_z = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_gyro_z(&has_bits);
          gyro_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMU_data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IMU.IMU_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float roll = 1;
  if (_internal_has_roll()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_roll(), target);
  }

  // float pitch = 2;
  if (_internal_has_pitch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pitch(), target);
  }

  // float acc_x = 3;
  if (_internal_has_acc_x()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_acc_x(), target);
  }

  // float acc_y = 4;
  if (_internal_has_acc_y()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_acc_y(), target);
  }

  // float acc_z = 5;
  if (_internal_has_acc_z()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_acc_z(), target);
  }

  // float gyro_x = 6;
  if (_internal_has_gyro_x()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_gyro_x(), target);
  }

  // float gyro_y = 7;
  if (_internal_has_gyro_y()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_gyro_y(), target);
  }

  // float gyro_z = 8;
  if (_internal_has_gyro_z()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_gyro_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IMU.IMU_data)
  return target;
}

size_t IMU_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IMU.IMU_data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // float roll = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // float pitch = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // float acc_x = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // float acc_y = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // float acc_z = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // float gyro_x = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // float gyro_y = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // float gyro_z = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMU_data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IMU.IMU_data)
  GOOGLE_DCHECK_NE(&from, this);
  const IMU_data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IMU_data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IMU.IMU_data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IMU.IMU_data)
    MergeFrom(*source);
  }
}

void IMU_data::MergeFrom(const IMU_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IMU.IMU_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      roll_ = from.roll_;
    }
    if (cached_has_bits & 0x00000002u) {
      pitch_ = from.pitch_;
    }
    if (cached_has_bits & 0x00000004u) {
      acc_x_ = from.acc_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      acc_y_ = from.acc_y_;
    }
    if (cached_has_bits & 0x00000010u) {
      acc_z_ = from.acc_z_;
    }
    if (cached_has_bits & 0x00000020u) {
      gyro_x_ = from.gyro_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      gyro_y_ = from.gyro_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      gyro_z_ = from.gyro_z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IMU_data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IMU.IMU_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMU_data::CopyFrom(const IMU_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IMU.IMU_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMU_data::IsInitialized() const {
  return true;
}

void IMU_data::InternalSwap(IMU_data* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMU_data, gyro_z_)
      + sizeof(IMU_data::gyro_z_)
      - PROTOBUF_FIELD_OFFSET(IMU_data, roll_)>(
          reinterpret_cast<char*>(&roll_),
          reinterpret_cast<char*>(&other->roll_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IMU_data::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace IMU
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IMU::IMU_data* Arena::CreateMaybeMessage< ::IMU::IMU_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IMU::IMU_data >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
