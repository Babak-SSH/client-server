// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: img_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_img_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_img_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_img_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_img_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_img_5fdata_2eproto;
namespace Image {
class img_data;
class img_dataDefaultTypeInternal;
extern img_dataDefaultTypeInternal _img_data_default_instance_;
}  // namespace Image
PROTOBUF_NAMESPACE_OPEN
template<> ::Image::img_data* Arena::CreateMaybeMessage<::Image::img_data>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Image {

// ===================================================================

class img_data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Image.img_data) */ {
 public:
  inline img_data() : img_data(nullptr) {};
  virtual ~img_data();

  img_data(const img_data& from);
  img_data(img_data&& from) noexcept
    : img_data() {
    *this = ::std::move(from);
  }

  inline img_data& operator=(const img_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline img_data& operator=(img_data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const img_data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const img_data* internal_default_instance() {
    return reinterpret_cast<const img_data*>(
               &_img_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(img_data& a, img_data& b) {
    a.Swap(&b);
  }
  inline void Swap(img_data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(img_data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline img_data* New() const final {
    return CreateMaybeMessage<img_data>(nullptr);
  }

  img_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<img_data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const img_data& from);
  void MergeFrom(const img_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(img_data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Image.img_data";
  }
  protected:
  explicit img_data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_img_5fdata_2eproto);
    return ::descriptor_table_img_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImgFieldNumber = 1,
  };
  // bytes img = 1;
  bool has_img() const;
  private:
  bool _internal_has_img() const;
  public:
  void clear_img();
  const std::string& img() const;
  void set_img(const std::string& value);
  void set_img(std::string&& value);
  void set_img(const char* value);
  void set_img(const void* value, size_t size);
  std::string* mutable_img();
  std::string* release_img();
  void set_allocated_img(std::string* img);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_img();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_img(
      std::string* img);
  private:
  const std::string& _internal_img() const;
  void _internal_set_img(const std::string& value);
  std::string* _internal_mutable_img();
  public:

  // @@protoc_insertion_point(class_scope:Image.img_data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr img_;
  friend struct ::TableStruct_img_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// img_data

// bytes img = 1;
inline bool img_data::_internal_has_img() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool img_data::has_img() const {
  return _internal_has_img();
}
inline void img_data::clear_img() {
  img_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& img_data::img() const {
  // @@protoc_insertion_point(field_get:Image.img_data.img)
  return _internal_img();
}
inline void img_data::set_img(const std::string& value) {
  _internal_set_img(value);
  // @@protoc_insertion_point(field_set:Image.img_data.img)
}
inline std::string* img_data::mutable_img() {
  // @@protoc_insertion_point(field_mutable:Image.img_data.img)
  return _internal_mutable_img();
}
inline const std::string& img_data::_internal_img() const {
  return img_.Get();
}
inline void img_data::_internal_set_img(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  img_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void img_data::set_img(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  img_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Image.img_data.img)
}
inline void img_data::set_img(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  img_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Image.img_data.img)
}
inline void img_data::set_img(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  img_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Image.img_data.img)
}
inline std::string* img_data::_internal_mutable_img() {
  _has_bits_[0] |= 0x00000001u;
  return img_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* img_data::release_img() {
  // @@protoc_insertion_point(field_release:Image.img_data.img)
  if (!_internal_has_img()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return img_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void img_data::set_allocated_img(std::string* img) {
  if (img != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  img_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), img,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Image.img_data.img)
}
inline std::string* img_data::unsafe_arena_release_img() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Image.img_data.img)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return img_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void img_data::unsafe_arena_set_allocated_img(
    std::string* img) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (img != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  img_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      img, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Image.img_data.img)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Image

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_img_5fdata_2eproto
